// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chats.sql

package repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (
    user_id,
    doc_id,
    doc_text
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, doc_id, doc_text, created_at
`

type CreateChatParams struct {
	UserID  uuid.UUID `json:"user_id"`
	DocID   string    `json:"doc_id"`
	DocText string    `json:"doc_text"`
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error) {
	row := q.db.QueryRow(ctx, createChat, arg.UserID, arg.DocID, arg.DocText)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DocID,
		&i.DocText,
		&i.CreatedAt,
	)
	return i, err
}

const getChatByDocID = `-- name: GetChatByDocID :one
SELECT id, user_id, doc_id, doc_text, created_at FROM chats
WHERE doc_id = $1 LIMIT 1
`

func (q *Queries) GetChatByDocID(ctx context.Context, docID string) (Chat, error) {
	row := q.db.QueryRow(ctx, getChatByDocID, docID)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DocID,
		&i.DocText,
		&i.CreatedAt,
	)
	return i, err
}

const getChatByID = `-- name: GetChatByID :one
SELECT id, user_id, doc_id, doc_text, created_at FROM chats
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChatByID(ctx context.Context, id uuid.UUID) (Chat, error) {
	row := q.db.QueryRow(ctx, getChatByID, id)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DocID,
		&i.DocText,
		&i.CreatedAt,
	)
	return i, err
}

const getUserChats = `-- name: GetUserChats :many
SELECT 
    id,
    doc_id,
    doc_text,
    created_at,
    user_id
FROM chats
WHERE user_id = $1
ORDER BY created_at DESC
`

type GetUserChatsRow struct {
	ID        uuid.UUID          `json:"id"`
	DocID     string             `json:"doc_id"`
	DocText   string             `json:"doc_text"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UserID    uuid.UUID          `json:"user_id"`
}

func (q *Queries) GetUserChats(ctx context.Context, userID uuid.UUID) ([]GetUserChatsRow, error) {
	rows, err := q.db.Query(ctx, getUserChats, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserChatsRow{}
	for rows.Next() {
		var i GetUserChatsRow
		if err := rows.Scan(
			&i.ID,
			&i.DocID,
			&i.DocText,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
