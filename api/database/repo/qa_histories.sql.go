// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: qa_histories.sql

package repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createQAHistory = `-- name: CreateQAHistory :one
INSERT INTO qa_histories (
    chat_id,
    question,
    answer,
    timestamp
) VALUES (
    $1, $2, $3, $4
) RETURNING id, chat_id, question, answer, timestamp
`

type CreateQAHistoryParams struct {
	ChatID    uuid.UUID          `json:"chat_id"`
	Question  string             `json:"question"`
	Answer    string             `json:"answer"`
	Timestamp pgtype.Timestamptz `json:"timestamp"`
}

func (q *Queries) CreateQAHistory(ctx context.Context, arg CreateQAHistoryParams) (QaHistory, error) {
	row := q.db.QueryRow(ctx, createQAHistory,
		arg.ChatID,
		arg.Question,
		arg.Answer,
		arg.Timestamp,
	)
	var i QaHistory
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.Question,
		&i.Answer,
		&i.Timestamp,
	)
	return i, err
}

type CreateQAHistoryBatchParams struct {
	ID        uuid.UUID          `json:"id"`
	ChatID    uuid.UUID          `json:"chat_id"`
	Question  string             `json:"question"`
	Answer    string             `json:"answer"`
	Timestamp pgtype.Timestamptz `json:"timestamp"`
}

const getQAHistoriesByChatID = `-- name: GetQAHistoriesByChatID :many
SELECT id, chat_id, question, answer, timestamp FROM qa_histories
WHERE chat_id = $1
ORDER BY timestamp ASC
`

func (q *Queries) GetQAHistoriesByChatID(ctx context.Context, chatID uuid.UUID) ([]QaHistory, error) {
	rows, err := q.db.Query(ctx, getQAHistoriesByChatID, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []QaHistory{}
	for rows.Next() {
		var i QaHistory
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.Question,
			&i.Answer,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
